//// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel CSMain
//
//// Create a RenderTexture with enableRandomWrite flag and set it
//// with cs.SetTexture
//RWTexture2D<float4> Result;
//
//[numthreads(8,8,1)]
//void CSMain (uint3 id : SV_DispatchThreadID)
//{
//    // TODO: insert actual code here!
//
//    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
//}

#pragma kernel KinematicUpdate

struct ParticleData
{
	float3 position;
	float3 velocity;
	float3 acceleration;
	float massInv;
	float3 netForce;
};

RWStructuredBuffer<ParticleData> particleDataBuffer;
float deltaTime;

[numthreads(32,32,1)]
void KinematicUpdate(uint3 id : SV_DispatchThreadID)
{
	int index = id.x + id.y * 32;
	particleDataBuffer[index].position += particleDataBuffer[index].velocity * deltaTime + particleDataBuffer[index].acceleration * .5 * deltaTime * deltaTime;
	particleDataBuffer[index].velocity += particleDataBuffer[index].acceleration * deltaTime;
	particleDataBuffer[index].acceleration = particleDataBuffer[index].massInv * particleDataBuffer[index].netForce;
	particleDataBuffer[index].netForce.xyz = 0;
}