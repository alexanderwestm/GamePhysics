// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
//#pragma kernel Gravity

const float G = 6.67408;

struct PhysicsData
{
	float3 positionA;
	float3 positionB;
	float3 velocityA;
	float3 velocityB;
	float2 mass;

	float3 netForceOutput;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

RWStructuredBuffer<PhysicsData> physicsDataBuffer;

[numthreads(16,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

	float3 posA = physicsDataBuffer[id.x].positionA;
	float3 posB = physicsDataBuffer[id.x].positionB;
	float3 velA = physicsDataBuffer[id.x].velocityA;
	float3 velB = physicsDataBuffer[id.x].velocityB;
	float massA = physicsDataBuffer[id.x].mass.x;
	float massB = physicsDataBuffer[id.x].mass.y;

	float3 distance = posB - posA;
	float3 force = (G * massA * massB * normalize(distance)) / dot(distance, distance);
	physicsDataBuffer[id.x].netForceOutput = force;
}
